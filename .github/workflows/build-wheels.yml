name: Build Wheels

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-wheels:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]

    env:
      # Build these CPython versions for each OS
      CIBW_BUILD: "cp311-* cp312-* cp313-*"
      # Skip musllinux and PyPy for now
      CIBW_SKIP: "pp* *-musllinux_*"
      # Architectures per-OS
      CIBW_ARCHS_LINUX: x86_64
      CIBW_ARCHS_WINDOWS: AMD64
      CIBW_ARCHS_MACOS: arm64
      # Install system deps inside the manylinux container before building
      CIBW_BEFORE_ALL_LINUX: |
        yum -y update || true
        yum -y install openssl-devel zlib-devel || true
      # Pass verbose CMake for easier debugging
      CMAKE_VERBOSE_MAKEFILE: "ON"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Linux builds run inside manylinux docker images, so host packages are unnecessary
      - name: Prep (Linux)
        if: startsWith(runner.os, 'Linux')
        run: echo "Using manylinux container for dependencies"

      - name: Install build tools (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          brew update
          brew install cmake ninja openssl@3 zlib || true
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "ZLIB_ROOT=$(brew --prefix zlib)" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix openssl@3):$(brew --prefix zlib)" >> $GITHUB_ENV

      - name: Install build tools (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: powershell
        run: |
          choco install -y openssl.light
          choco install -y zlib
          # Typical install paths for Chocolatey packages
          $OpenSslRoot = "C:\\Program Files\\OpenSSL-Win64"
          if (Test-Path $OpenSslRoot) { echo "OPENSSL_ROOT_DIR=$OpenSslRoot" | Out-File -FilePath $env:GITHUB_ENV -Append }
          # zlib headers and libs may be under Chocolatey lib cache; expose common roots to CMake via CMAKE_PREFIX_PATH
          echo "CMAKE_PREFIX_PATH=$OpenSslRoot" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install cibuildwheel==2.20.0

      - name: Build wheels with cibuildwheel
        # Run from repo root where pyproject.toml resides
        env:
          CIBW_BUILD: ${{ env.CIBW_BUILD }}
          CIBW_ARCHS: ${{ runner.os == 'Linux' && env.CIBW_ARCHS_LINUX || (runner.os == 'Windows' && env.CIBW_ARCHS_WINDOWS || env.CIBW_ARCHS_MACOS) }}
          # Help CMake find system libraries if your CMakeLists uses these hints
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}
          ZLIB_ROOT: ${{ env.ZLIB_ROOT }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Show wheels
        working-directory: dist
        run: ls -la

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
